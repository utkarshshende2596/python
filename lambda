## lambda arguments: expression
#it can have any number of arguments but single expression
eg.
# def cube(y): 
#     return y*y*y; 
  
# g = lambda x: x*x*x 
# print(g(7)) 
  
# print(cube(5)) 


#The power of lambda is better shown when you use them as an anonymous function inside another function.


# def myfunc(n):
#   return lambda a : a * n

# mydoubler = myfunc(2)

# print(mydoubler(11))


from functools import reduce
li=['a S','Be','d f','UY','fGh']
# z=list(map(lambda x:x%2!=0,li))
# print(z)

# z=list(filter(lambda x:x%2!=0,li))
# print(z)


# z=reduce((lambda x,y:x+y),li)
# print(z)

# z = lambda x,y : print(x) if x>y else print(y)  
# z(4,3)

# def fun(line):
#   line=line.lower()
#   line=line.split()
#   return line
# z = list(map(fun,li))
# print(z)

l =[lambda x:x.split(),lambda x:x.lower()]
for i in l:
  z = list(map(i,li))
print(z)

# rdd4 = rdd3.groupBy(lambda w: w[0:3])

#word count
map(lambda x: (x,1))
reducebykey(lambda a,b: a+b)

rdd.mapPartation(fun,li).glom().collect()
#glom to view data according to partition
